var passwordPolicy = {
    MinLength: 10,
    MaxLength: 32,
    AssertPasswordPolicy: assertPasswordPolicy
};

if (typeof window != 'undefined')
    window.PasswordPolicy = passwordPolicy;


function assertPasswordPolicy(password, name, username) {

    var minLength = passwordPolicy.MinLength;
    var maxLength = passwordPolicy.MaxLength;
    var passwordLC = String(password).toLowerCase();
    var nameLC = String(name).toLowerCase();
    var usernameLC = String(username).toLowerCase();


    // Look for a short password
    if (password.length < minLength) {
        return "The password is too short.  It has to\nbe at least " + minLength.toString() + " characters long.";
    }

    // Look for a long password
    if (password.length > maxLength) {
        return "The password is too long.  It has to\nbe no more than " + maxLength.toString() + " characters long.";
    }

    if (username.length >= 3 && passwordLC.indexOf(usernameLC) !== -1) {
        return "The password may not contain your username.";
    }

    if (nameLC.length > 0) {
        var nameArray = nameLC.replace(/,|\.|-|–|—|_|\$|\#|\t/g, " ").split(" ");
        for (part in nameArray) {
            if (nameArray[part].length >= 3) {
                if (passwordLC.indexOf(nameArray[part]) !== -1) {
                    return "The password may not contain any part of your display name: " + name + ".";
                }
            }
        }
    }

    if (passwordLC.indexOf(" ") !== -1) {
        return "The password may not contain spaces.";
    }

    if (passwordLC.indexOf(".@") !== -1) {
        return "The password may not contain the character sequence: '.@'";
    }


    var qualityRequirements = 0;
    var recommend = [];

    if (password.match(/[a-z]/)) {
        qualityRequirements++;
    }
    else {
        recommend.splice(0, 0, "lowercase letters (abc...)");
    }

    if (password.match(/[A-Z]/)) {
        qualityRequirements++;
    }
    else {
        recommend.splice(0, 0, "uppercase letters (ABC...)");
    }

    if (password.match(/[0-9]/)) {
        qualityRequirements++;
    }
    else {
        recommend.splice(0, 0, "numbers (0-9)");
    }

    if (password.match(/[^a-zA-Z0-9]/)) {
        qualityRequirements++;
    }
    else {
        recommend.splice(0, 0, "special characters (!@#$...)");
    }

    if (qualityRequirements < 3) {
        return "The password does not meet the complexity requirements. Try adding characters such as " + recommend.join(" or ");
    }

    return "";  // Successfully validated password

}


var characterClass = function (characters, limit) {
    this.characters = characters;
    this.count = 0;
    this.limit = limit;
    this.isAvailable = function () {
        return this.count < this.limit;
    };
    this.randomChar = function () {
        x = Math.random();
        var position = Math.floor(x * this.characters.length);
        return this.characters.substr(position, 1);
    };
};

function AlertValidPasswordSymbols() {
    alert("Valid symbols:\n~ ` ! @ # $ % ^ & * ( ) + = _ - { } [ ] \ | : ; \" ' ? / < > , .\n(no spaces)");
}

function makePassword(bannerPW) {
    var password = "";
    var classes = [new characterClass("abcdefghjkmnpqrstuvwxyz", 6),
                    new characterClass("ABCDEFGHJKMNPQRSTUVWXYZ", 6),
                    new characterClass("23456789", 2),
                    new characterClass(bannerPW ? "#$_" : "!?+#.", 2)];

    // Create a password that meets the min password policy length
    while (password.length < passwordPolicy.MinLength) {
        var classIndex = 0;

        // Pick a character class..
        // NOTE: Currently, Oracle PWs require first char to be a letter, hence this logic
        if (password.length == 0) {
            classIndex = Math.floor(Math.random() * 2);
        }
        else {
            classIndex = Math.floor(Math.random() * 4);
        }

        var isLastChar = (password.length + 1) >= passwordPolicy.MinLength;
        var classesUsed = 0;

        if (isLastChar) {
            // Determine how many character classes we've used
            for (var i = 0; i < classes.length; i++) {
                if (classes[i].count > 0)
                    classesUsed += 1;
            }
        }

        // If the current character class is NOT available OR if this is the last character
        // and only 2 character classes have been used, find an available/unused character class
        if (!classes[classIndex].isAvailable() || (isLastChar && (classesUsed < 3))) {

            var original = classIndex;

            // Check for unused classes first...
            for (var i = 0; i < classes.length; i++) {
                if (classes[i].count == 0) {
                    classIndex = i;
                }
            }

            if (original == classIndex) {

                // We're using all the classes, so just try the next one until we find one that's not at its limit
                while (!classes[classIndex].isAvailable()) {
                    classIndex++;
                    if (classIndex == classes.length) {
                        classIndex = 0;
                    }
                }
            }
        }

        classes[classIndex].count++;

        password += classes[classIndex].randomChar();
    }

    return password;
}
